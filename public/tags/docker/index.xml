<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Yuvi</title>
    <link>https://words.yuvi.in/tags/docker/</link>
    <description>Recent content in Docker on Yuvi</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 29 Nov 2023 14:27:25 -0800</lastBuildDate>
    <atom:link href="https://words.yuvi.in/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Precompiling Julia Packages in Docker Images</title>
      <link>https://words.yuvi.in/post/pre-compiling-julia-docker/</link>
      <pubDate>Wed, 29 Nov 2023 14:27:25 -0800</pubDate>
      <guid>https://words.yuvi.in/post/pre-compiling-julia-docker/</guid>
      <description>&lt;p&gt;Julia &lt;a href=&#34;https://julialang.org/blog/2021/01/precompile_tutorial/&#34;&gt;pre-compiles&lt;/a&gt; packages on first load, allowing them to deeply optimize the generated code for the particular CPU architecture the user is running on for maximum performance. However, it &lt;em&gt;does&lt;/em&gt; take some time, so there&amp;rsquo;s a startup latency penalty here. If you make docker images with precompiled Julia packages, you can pay this pre-compilation penalty at &lt;em&gt;image build time&lt;/em&gt;, rather than at &lt;em&gt;image startup time&lt;/em&gt;. Much better for your users!&lt;/p&gt;&#xA;&lt;p&gt;If you look at the &lt;a href=&#34;https://julialang.org/blog/2021/01/precompile_tutorial/&#34;&gt;tutorial&lt;/a&gt; for pre-compilation, it may sound like all you need to do is call &lt;a href=&#34;https://pkgdocs.julialang.org/v1/api/#Pkg.precompile&#34;&gt;&lt;code&gt;Pkg.precompile&lt;/code&gt;&lt;/a&gt;. And if you actually build and test your docker image, it will work fine - your precompiled libraries are loaded, and startup is fast. Yay!&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
